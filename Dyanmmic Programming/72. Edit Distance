class Solution {
public:
    int dp[501][501];
    int solve(string w1 , string w2 , int i , int j)
    {
        if(i==0)
            return j;
        if(j==0)
            return i;
        if(dp[i][j] != -1)
            return dp[i][j];
        
        if(w1[i-1] == w2[j-1])
            return dp[i][j] = solve(w1 , w2 , i-1 , j-1);
        else
            return dp[i][j] = min( 1 + solve(w1 , w2 , i , j-1) , min( 1+ solve(w1 , w2 , i-1 , j) , 1 + solve(w1 , w2 , i-1 , j-1)));
    }
    int minDistance(string word1, string word2) {
        memset(dp , -1 , sizeof(dp));
        return solve(word1 , word2 , word1.size() , word2.size());
    }
};


//Bottom Up Approach
class Solution {
public:
    int minDistance(string word1, string word2) {
        int n = word1.size();
        int m = word2.size();
        int dp[n+1][m+1];
        
        for(int i=0 ; i<=n ; i++)
        {
            for(int j=0 ; j<=m ; j++)
            {
                if(i==0)
                    dp[i][j] = j;
                if(j == 0)
                    dp[i][j] = i;
            }
        }
        
        for(int i=1 ; i<=n ; i++)
        {
            for(int j=1 ; j<=m ; j++)
            {
                if(word1[i-1] == word2[j-1])
                    dp[i][j] = dp[i-1][j-1];
                else
                    dp[i][j] = 1 + min(dp[i-1][j-1] , min(dp[i-1][j] , dp[i][j-1]));
            }
        }
        return dp[n][m];
    }
};

//space optimize
class Solution {
public:
    int minDistance(string word1, string word2) {
        int n = word1.size();
        int m = word2.size();
        vector<int>prev(m+1,0) , cur(m+1 ,  0);
        
        for(int i=0 ; i<=m ; i++)
            prev[i] = i;
        
        for(int i=1 ; i<=n ; i++)
        {
            cur[0] = i;
            for(int j=1 ; j<=m ; j++)
            {
                if(word1[i-1] == word2[j-1])
                    cur[j] = prev[j-1];
                else
                    cur[j] = 1 + min(prev[j] , min(prev[j-1] , cur[j-1]));
            }
            prev = cur;
        }
        return prev[m];
    }
};
