class Solution {
public:
    bool static cmp(string s1 , string s2)
    {
        return s1.size() < s2.size();
    }
    
    int longestStrChain(vector<string>& words) {
        sort(words.begin() , words.end() , cmp);
        int n = words.size() , maxi = 1;
         for(int i = 0 ; i<n ; i++)
            cout<<words[i]<<" ";
        
        vector<int>dp(n , 1);
        
        for(int i = 1 ; i<n ; i++)
        {
            for(int j = 0; j<i ; j++)
            {
                if(words[i].size() == words[j].size() || words[i].size() > words[j].size()+1)
                    continue;
                int flag = 0;
                for(int jj = 0 , ii = 0; jj<words[j].size() and ii<words[i].size() ; )
                {
                    if(words[j][jj] == words[i][ii]){
                        ii++ ; jj++;
                    }
                    else{
                        flag += 1;
                        ii += 1;
                    }
                }
                if(flag<=1){
                   if(dp[i] < dp[j]+1){
                       dp[i] = dp[j]+1;
                   }
                }
            }
            maxi = max(dp[i] , maxi);
        }
        return maxi;
    }
};
