class Solution {
public:
    bool solve(vector<int>& nums , int i , int target , vector<vector<int>>&dp)
    {
        if(!target)
            return true;
        
        if(i == 0)
            return nums[i] == target;
        
        if(dp[i][target] != -1)
            return dp[i][target];
        
        bool nottake = solve(nums , i-1 , target , dp);
        bool take = false;
        if(nums[i] <= target)
            take = solve(nums , i-1 , target - nums[i] , dp);
        
        return dp[i][target] = take | nottake; 
    }
    bool canPartition(vector<int>& nums) {
        int sum = 0 ;
        int n = nums.size();
        
        for(int i = 0; i<n ; i++)
            sum += nums[i];
        
        if(sum % 2 != 0)
            return false;
        
        vector<vector<int>>dp(n , vector<int>((sum/2)+1 , -1));
        return solve(nums , n-1 , sum/2 , dp);
    }
};


//Tabular

class Solution {
public:

    bool canPartition(vector<int>& nums) {
        int sum = 0 ;
        int n = nums.size();
        if(n<=1)
            return false;
        
        for(int i = 0; i<n ; i++)
            sum += nums[i];
        
        if(sum % 2 != 0)
            return false;
        
        vector<vector<bool>>dp(n , vector<bool>((sum/2)+1 , 0));
        for(int i = 0; i<n ; i++)
            dp[i][0] = true;
        
        if(nums[0]==sum/2)
            dp[0][nums[0]]=true;
        
        for(int i = 1 ; i<n ; i++)
        {
            for(int target = 1 ; target <=sum/2 ; target++)
            {
                bool nottake = dp[i-1][target];
                bool take = false;
                if(nums[i] <= target)
                    take = dp[i-1][target - nums[i]];

                dp[i][target] = take | nottake; 
            }
        }
        return dp[n-1][sum/2];
    }
};


