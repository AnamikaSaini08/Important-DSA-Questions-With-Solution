
 int solve(vector<int>& nums , int i , int target)
    {
        if(!target)
            return 1;
        if(i == 0){
            if(nums[i] == target)  return 1;
            return 0;
        }
        
        int nottake = solve(nums , i-1 , target);
        int take = 0;
        if(nums[i] <= target)
            take = solve(nums , i-1 , target - nums[i]);
        return take + nottake;
    }
 int findWays(vector<int> &nums, int k)
 {
    int n = nums.size();
    return solve(nums , n-1 , k);
 }
    
    
    
    
//Tabular
int findWays(vector<int> &nums, int k)
{
    // Write your code here.
    int n = nums.size();
    vector<vector<int>>dp(n , vector<int>(k+1 , 0));
    for(int i =0 ; i<n ; i++)
        dp[i][0] = true;
    if(nums[0] <= k)
        dp[0][nums[0]] = true;
   
    for(int i=1 ; i<n ; i++)
    {
        for(int target = 0 ; target <=k ; target++)
        {
            int nottake = dp[i-1][target];
            int take = 0;
            if(nums[i] <= target)
                take = dp[i-1][target - nums[i]];
            dp[i][target] =  take + nottake;
        }
    }
    return dp[n-1][k];
}
