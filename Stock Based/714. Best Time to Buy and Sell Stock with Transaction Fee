class Solution {
public:
    int dp[50001][2];
    int solve(vector<int>& prices , int i , bool buy , int fee)
    {
        if(i >= prices.size())
            return 0;
        if(dp[i][buy] != -1)
            return dp[i][buy];
        
        if(buy)
            return dp[i][buy] = max(solve(prices , i+1 , buy , fee) , solve(prices , i+1 , !buy , fee) - prices[i] - fee);
        else
            return dp[i][buy] = max(solve(prices , i+1 , buy , fee) , solve(prices , i+1 , !buy , fee) + prices[i]);
    }
    int maxProfit(vector<int>& prices, int fee) {
        memset(dp , -1 , sizeof(dp));
        return solve(prices , 0 , true , fee);
    }
};

//Tabular
class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        int n = prices.size();
        vector<vector<int>>dp(n+1 , vector<int>(2,0));
        
        for(int i=n-1 ; i>=0 ; i--)
        {
            for(int j= 0; j<=1 ; j++)
            {
                if(j)
                  dp[i][j] = max(dp[i+1][1] , dp[i+1][0] - prices[i] - fee);
                else
                  dp[i][j] = max(dp[i+1][0] , dp[i+1][1] + prices[i]);
            }
        }
        return dp[0][1];
    }
};


//Optimized
class Solution {
public:
    int maxProfit(vector<int>& prices, int fee) {
        int n = prices.size();
        vector<int>next(2,0) , curr(2,0);
        
        for(int i=n-1 ; i>=0 ; i--)
        {
            for(int j= 0; j<=1 ; j++)
            {
                if(j)
                  curr[j] = max(next[1] , next[0] - prices[i] - fee);
                else
                  curr[j] = max(next[0] , next[1] + prices[i]);
            }
            next = curr;
        }
        return next[1];
    }
};
