class Solution {
public:
    int dp[100002][2][2];
    int solve(vector<int>& prices , int i , int trans , bool flag)
    {
        if(i == prices.size() || trans == 2)
            return 0;
        
        if(dp[i][trans][flag] != -1)
            return dp[i][trans][flag];
        
        if(flag){
            return dp[i][trans][flag] = max( solve(prices , i+1 , trans , flag) , solve(prices , i+1 , trans , !flag) - prices[i]);
        }
        else{
            return dp[i][trans][flag] = max( solve(prices , i+1 , trans , flag) , solve(prices , i+1 , trans+1 , !flag) + prices[i]);
        }
        
    }
    int maxProfit(vector<int>& prices) {
        memset(dp , -1 , sizeof(dp));
        return solve(prices , 0 , 0 , true );
    }
};

//Tabular
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<vector<int>>>dp(n+1 , vector<vector<int>>(2 , vector<int>(3,0)));
       
        for(int i = n-1 ; i>=0 ; i--)
        {
            for(int j = 0 ; j<=1 ; j++)
            {
                for(int k = 1 ; k>=0 ; k--)
                {
                     if(j)
                       dp[i][j][k] = max( dp[i+1][1][k] , dp[i+1][0][k] - prices[i]);

                     else
                       dp[i][j][k] = max( dp[i+1][0][k] , dp[i+1][1][k+1] + prices[i]);
                }
            }
        }
        return dp[0][1][0];
                    
    }
};


//Optimized

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>>next(2 , vector<int>(3,0));
        vector<vector<int>>curr(2 , vector<int>(3,0));
        
       
        for(int i = n-1 ; i>=0 ; i--)
        {
            for(int j = 0 ; j<=1 ; j++)
            {
                for(int k = 1 ; k>=0 ; k--)
                {
                     if(j)
                       curr[j][k] = max( next[1][k] , next[0][k] - prices[i]);

                     else
                       curr[j][k] = max( next[0][k] , next[1][k+1] + prices[i]);
                }
            }
            next = curr;
        }
        return curr[1][0];
                    
    }
};
