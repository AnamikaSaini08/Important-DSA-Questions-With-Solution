class Solution {
public:
    int dp[1001][101][2];
    int solve(vector<int>& prices , int i , int trans , bool flag , int k)
    {
        if(i == prices.size() || trans == k)
            return 0;
        
        if(dp[i][trans][flag] != -1)
            return dp[i][trans][flag];
        
        if(flag){
            return dp[i][trans][flag] = max( solve(prices , i+1 , trans , flag,k) , solve(prices , i+1 , trans , !flag , k) - prices[i]);
        }
        else{
            return dp[i][trans][flag] = max( solve(prices , i+1 , trans , flag,k) , solve(prices , i+1 , trans+1 , !flag ,k) + prices[i]);
        }
        
    }
    int maxProfit(int k, vector<int>& prices) {
        memset(dp , -1 , sizeof(dp));
        return solve(prices , 0 , 0 , true , k );
    }
};

//Tabular
class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        vector<vector<vector<int>>>dp(n+1 , vector<vector<int>>(2 , vector<int>(k+1 ,0)));
        
        for(int i = n-1 ; i>=0 ; i--)
        {
            for(int flag = 1 ; flag>=0 ; flag--)
            {
                for(int trans = k-1 ; trans>=0  ; trans--)
                {
                     if(flag)
                        dp[i][flag][trans] = max( dp[i+1][1][trans] , dp[i+1][0][trans] - prices[i]);
                     else
                        dp[i][flag][trans] = max( dp[i+1][0][trans] , dp[i+1][1][trans+1] + prices[i]);
                }
            }
        }
        return dp[0][1][0];
    }
};

//Most Optimized

class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>>next(2 , vector<int>(k+1 ,0));
        vector<vector<int>>curr(2 , vector<int>(k+1 ,0));
        
        for(int i = n-1 ; i>=0 ; i--)
        {
            for(int flag = 1 ; flag>=0 ; flag--)
            {
                for(int trans = k-1 ; trans>=0  ; trans--)
                {
                     if(flag)
                        curr[flag][trans] = max(next[1][trans] , next[0][trans] - prices[i]);
                     else
                        curr[flag][trans] = max( next[0][trans] , next[1][trans+1] + prices[i]);
                }
            }
            next = curr;
        }
        return next[1][0];
    }
};
