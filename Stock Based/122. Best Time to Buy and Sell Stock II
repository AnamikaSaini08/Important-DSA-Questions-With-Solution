class Solution {
public:
    int dp[30001][2];
    int solve(vector<int>& prices , int i , bool flag)
    {
        if(i == prices.size())
            return 0;
        
        if(dp[i][flag] != -1)
            return dp[i][flag];
        
        //buy
        if(flag)
            return dp[i][flag] = max( solve(prices , i+1 , flag) , (solve(prices , i+1 , !flag) - prices[i]));
        
        //sell
        else
            return dp[i][flag] =  max(solve(prices , i+1 , flag) , (prices[i] + solve(prices , i+1 , !flag)));
    }
    int maxProfit(vector<int>& prices) {
        memset(dp , -1 , sizeof(dp));
        return solve(prices , 0 , true);
    }
};


//Tablular

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>>dp(n+1 , vector<int>(2,0));
        
        for(int i = n-1 ; i>=0 ; i--)
        {
            for(int j = 0 ; j<2 ; j++)
            {
                if(j)
                  dp[i][j] = max( dp[i+1][j] , dp[i+1][0] - prices[i]);
        
                else
                  dp[i][j] =  max(dp[i+1][j] , prices[i] + dp[i+1][1]);
            }
        }
        return dp[0][1];
    }
};








//Most Optimized
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<int>next(2,0);
        vector<int>cur(n+1 , 0);
        
        for(int i = n-1 ; i>=0 ; i--)
        {
            for(int j = 0 ; j<2 ; j++)
            {
                if(j)
                  cur[j] = max( next[j] , next[0] - prices[i]);
        
                else
                  cur[j] =  max(next[j] , prices[i] + next[1]);
            }
            next = cur;
        }
        return next[1];
    }
};