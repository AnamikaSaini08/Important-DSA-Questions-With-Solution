class Solution {
public:
   
    ListNode* addTwoNumbers(ListNode* head1, ListNode* head2) {
        ListNode *head = NULL , *prev;
        int sum = 0; 
        int carry = 0;
        
        while(head1 and head2)
        {
            sum = (head1->val + head2->val) + carry;
            carry = sum/10;
            sum = sum%10;
            ListNode *newnode = new ListNode(sum);
            if(!head){
                head = newnode;
                prev = head;
            }
            else{
                prev->next = newnode;
                prev = newnode;
            }
            head1 = head1->next;
            head2 = head2->next; 
        }
        while(head1){
            sum = head1->val + carry;
            carry = sum/10;
            sum = sum%10;
            ListNode *newnode = new ListNode(sum);
            prev->next = newnode;
            prev = newnode;
            head1 = head1->next;
        }
         while(head2){
            sum = head2->val + carry;
            carry = sum/10;
            sum = sum%10;
            ListNode *newnode = new ListNode(sum);
            prev->next = newnode;
            prev = newnode;
             head2 = head2->next;
        }
        if(carry){
            ListNode *newnode = new ListNode(carry);
            prev->next = newnode;
            prev = newnode;
        }
        return head;
    }
};


//OPTIMISE
  ListNode* addTwoNumbers(ListNode* head1, ListNode* head2) {
        ListNode *head = new ListNode();
        ListNode *prev = head;
        int sum = 0; 
        int carry = 0;
        
        while(head1 || head2 || carry)
        {
            if(head1){
                sum += head1->val;
                head1 = head1->next;
            }
            if(head2){
                sum += head2->val;
                head2 = head2->next; 
            }
            sum += carry;
            carry = sum/10;
            ListNode *newnode = new ListNode(sum%10);
            sum = 0;
            prev->next = newnode;
            prev = newnode;
        }
        return head->next;
    }
