class Solution {
public:
    int length(ListNode *head){
        int len = 0;
        while(head){
            len++;
            head = head->next;
        }
        return len;
    }
    
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        int l1 = length(headA);
        int l2 = length(headB);
        
        if(l1>l2){
            for(int i=1 ; i<=(l1-l2) ; i++)
                headA = headA->next;
        }
        if(l2>l1){
            for(int i=1 ; i<=(l2-l1) ; i++)
                headB = headB->next;
        }
        while(headA != headB){
            headA = headA->next;
            headB = headB->next;
        }
        return headA;
    }
};


//OPTIMISED
ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(!headA || !headB)
            return NULL;
        ListNode *a = headA;
        ListNode *b = headB;
        
        while(a != b){
            a = a==NULL ? headA : a->next;
            b = b==NULL ? headB : b->next;
        }
        return a;
    }
