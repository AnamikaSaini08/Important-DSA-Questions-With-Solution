class MedianFinder {
public:
    MedianFinder() {
       // MedianFinder medianFinder = new MedianFinder();
    }
    
    priority_queue<int,vector<int>,greater<int>>minH;
    priority_queue<int>maxH;
    
    void addNum(int num) {
        if(maxH.empty() || maxH.top() > num)
            maxH.push(num);
        else
            minH.push(num);
        
        if(maxH.size() > minH.size()+1)
        {
            minH.push(maxH.top());
            maxH.pop();
        }
        else if(minH.size() > maxH.size()+1)
        {
            maxH.push(minH.top());
            minH.pop();
        }
    }
    
    double findMedian() {
        if(maxH.size() == minH.size()){
            return (double)(maxH.top()+minH.top())/2;
        }
        else if(maxH.size() > minH.size())
            return maxH.top();
        else
            return minH.top();
    }
};
