//Brute Force

class Solution {
public:
    void solve(vector<vector<int>>& grid , int row , int col , int i , int j , int &count , vector<vector<int>>& visit)
    {
        if(row < 0 || row >=grid.size() || col<0 || col>=grid[0].size() || visit[row][col])
            return;
        
        if(grid[row][col]){
            count  = min(count , (abs(row-i)+abs(col-j))+grid[row][col]-1);
            return;
        }
        
        visit[row][col] = 1;
        
        solve(grid , row-1 , col , i , j , count , visit);
        solve(grid , row+1 , col , i , j , count , visit);
        solve(grid , row , col-1 , i , j , count , visit);
        solve(grid , row , col+1 , i , j , count , visit);
        visit[row][col] = 0;
        
    }
    int maxDistance(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();
        int ans = -1;
        vector<vector<int>>visit(row , vector<int>(col , 0));
        
        for(int i = 0; i<row ; i++)
        {
            for(int j = 0; j<col ; j++)
            {
                if(grid[i][j] == 0){
                    int count = INT_MAX;
                    solve(grid , i , j , i, j , count , visit);
                    if(count != INT_MAX){
                        ans = max(count , ans);
                        grid[i][j] = count+1;
                    }
                }
            }
        }
        return ans;
    }
};


//Multi Source BSF

class Solution {
public:
    int maxDistance(vector<vector<int>>& grid) {
        queue<pair<int,int>>q;
        int row = grid.size();
        int col = grid[0].size();
        int ans = INT_MIN;
        vector<vector<int>>dist(row,  vector<int>(col , INT_MAX));
        
        for(int i=0 ; i<row ; i++)
        {    
            for(int j =0; j<col ; j++)
            {
                if(grid[i][j]){
                    q.push({i,j});
                    dist[i][j] = 0;
                }
            }
        }
        
        int dx[] = {-1, 1, 0 , 0};
        int dy[] = {0 , 0 , -1 , 1};
        while(q.size())
        {
            int x = q.front().first;
            int y = q.front().second;
            q.pop();
            
            for(int i=0 ; i<4 ; i++){
                int xx = x + dx[i];
                int yy = y + dy[i];
                
               if(xx >=0 and xx<row and yy>=0 and yy<col)
               {
                   if(dist[xx][yy] == INT_MAX){
                       dist[xx][yy] = dist[x][y]+1;
                       q.push({xx , yy});
                       ans = max(ans , dist[xx][yy]);
                   }
               }
            }
        }
        if(ans == INT_MIN)
            return -1;
        return ans;
    }
};
