class Solution {
public:
    int dx[4] = {0,0,1, -1};
    int dy[4] = {1, -1, 0, 0};
    
    int nearestExit(vector<vector<char>>& grid, vector<int>& tt) {
        int n = grid.size(), m = grid[0].size();
        queue<pair<int, int>> q;
        
        q.push({tt[0], tt[1]});

        int level = 0;
        while(!q.empty()){
            int l = q.size();
            level++;
            for(int i=0; i<l; i++){
                auto top = q.front();
                q.pop();
                for(int k=0; k<4; k++){
                    int x = top.first+dx[k];
                    int y = top.second+dy[k];
                    if(x>=0 && y>=0 && x<grid.size() && y<grid[0].size()){
                        if((x == 0 || x == n-1 || y == 0 || y == m-1) && grid[x][y] == '.' && (x!=tt[0] || y!=tt[1])){
                            return level;
                        }
                        if(grid[x][y] == '.'){
                            grid[x][y] = '+';
                            q.push({x,y});
                        }
                    }
                }
            }
        }
        
        return -1;
    }
};
