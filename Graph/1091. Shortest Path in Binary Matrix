Using DFS

class Solution {
public:
    void solve(vector<vector<int>>& grid , int i , int j , int row , int col , int count , int &ans , vector<vector<int>>dir)
    {
        if(i<0 || i>=row || j<0 || j>=col || grid[i][j] == -1 || grid[i][j])
            return;
        if(i==row-1 and j==col-1){
            ans = min(ans , count);
            return;
        }
        
        grid[i][j] = -1;
        for(int k=0 ; k<8 ; k++)
            solve(grid , i+dir[k][0] , j+dir[k][1] , row , col , count+1 , ans ,dir);
        grid[i][j] = 0;
        
    }
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int ans = INT_MAX;
        vector<vector<int>>dir = {{-1,0} , {1,0} , {0,-1} , {0,1} , {-1,-1} , {1,1} , {-1,1} , {1,-1}};
        solve(grid , 0 , 0 , grid.size() , grid[0].size() , 1 , ans , dir);
        if(ans == INT_MAX)
            return -1;
        return ans;
    }
};


//Using BFS

class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();
        if(grid[0][0])  return -1;
        if(row==1 and col==1){
            if(grid[0][0])
                return -1;
            return 1;
        }
        queue<pair<int,int>>q;
        q.push({0,0});
        grid[0][0] = 1;
        int dir[8][2] = {{-1,0},{1,0},{0,-1},{0,1},{1,1},{-1,-1},{1,-1},{-1,1}};
        
        while(q.size())
        {
            int x = q.front().first;
            int y = q.front().second;
            q.pop();
            
            for(int i=0 ; i<8 ; i++)
            {
                int xx = x+dir[i][0];
                int yy = y+dir[i][1];
                
                if(xx>=0 and xx<row and yy>=0 and yy<col and grid[xx][yy] == 0)
                {
                    grid[xx][yy] = grid[x][y]+1;
                    q.push({xx , yy});
                }
            }
        }
        if(grid[row-1][col-1]==1 || grid[row-1][col-1]==0)
            return -1;
        return grid[row-1][col-1];
    }
};
