class Solution {
public:
    int dir[4][2] = {{-1,0},{1,0},{0,-1},{0,1}};
    void dfs(int i , int j , vector<vector<int>>&grid , queue<pair<int,int>>&q, vector<vector<bool>>&visit)
    {
        //we only see connected component
        if(i<0 || i>=grid.size() || j<0 || j>=grid[0].size() || visit[i][j] || grid[i][j]==0)
            return;
        
        visit[i][j] = true;
        q.push({i,j});
        
        for(int k=0 ; k<4 ; k++)
            dfs(i+dir[k][0],j+dir[k][1] , grid , q , visit);
    }
    
    int shortestBridge(vector<vector<int>>& grid) {
        int row = grid.size();
        int col = grid[0].size();
        vector<vector<bool>>visit(row , vector<bool>(col,false));
        
        bool flag=false;
        queue<pair<int,int>>q;
        for(int i=0 ; i<row ; i++)
        {
            for(int j=0 ; j<col ; j++)
            {
                if(grid[i][j]){
                    dfs(i,j,grid,q,visit);
                    flag=true;
                    break;
                }
            }
            if(flag)
                break;
        }
        
        int level = 0;
        while(q.size())
        {
            int size = q.size();
            while(size--)
            {
                int x = q.front().first;
                int y = q.front().second;
                q.pop();
                
                for(int i=0;i<4 ; i++)
                {
                    int xx = x+dir[i][0];
                    int yy = y+dir[i][1];
                    
                    if(xx>=0 and xx<row and yy>=0 and yy<col and !visit[xx][yy])
                    {
                        if(grid[xx][yy])
                            return level;
                        visit[xx][yy] = true;
                        q.push({xx,yy});
                    }
                }
            }
            level++;
        }
        return -1;
    }
};
