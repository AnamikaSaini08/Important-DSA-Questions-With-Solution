class Solution {
public:
    void dfs(vector<vector<int>>&nums , int i , int j , int prev , vector<vector<bool>>&visit)
    {
        if(i<0 || i>=nums.size() || j<0 || j>=nums[0].size())
            return;
        
        if(nums[i][j] < prev || visit[i][j])
            return;
        
        visit[i][j] = true;
        dfs(nums , i-1 , j , nums[i][j] , visit);
        dfs(nums , i+1 , j , nums[i][j] , visit);
        dfs(nums , i , j-1 , nums[i][j] , visit);
        dfs(nums , i , j+1 , nums[i][j] , visit);
        //notice we don not backtrack(once we reach mark it reach)
    }
    vector<vector<int>> pacificAtlantic(vector<vector<int>>&nums) {
        int row = nums.size() ;
        int col = nums[0].size();
        
        vector<vector<int>>res;
        vector<vector<bool>>pacific(row , vector<bool>(col , false));
        vector<vector<bool>>atlantic(row , vector<bool>(col , false));
        vector<vector<bool>>visit(row , vector<bool>(col , false));
        
        //DFS
        for(int i=0 ; i<col ; i++)
        {
            dfs(nums , 0 , i , INT_MIN , pacific);
            dfs(nums , row-1 , i , INT_MIN , atlantic);
        }
        for(int i=0 ; i<row ; i++)
        {
            dfs(nums , i , 0 , INT_MIN , pacific);
            dfs(nums , i , col-1 , INT_MIN , atlantic);
        }
        
        
        
        for(int i=0 ; i<row ; i++)
        {
            for(int j=0 ; j<col ; j++)
            {
                if(pacific[i][j] and atlantic[i][j])
                    res.push_back({i,j});
            }
        }
        return res;
        
    }
};
