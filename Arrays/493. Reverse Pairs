class Solution {
public:
int merge(vector<int>&arr , int lb , int mid , int ub)
{
    int i = lb , j = mid + 1 , k = lb;
    int temp[ub+1];
    int count = 0;
    int l = mid+1;
    
  for(int k = lb ; k<= mid ; k++)
  {
      while(l<=ub and arr[k] > (2 * (long) arr[l]))
          l++;
      count += (l - (mid+1));
  }
    
    while( i<= mid and j<=ub)
    {   
        if(arr[i] <= arr[j]){
            temp[k++] = arr[i++];
        }
        else{
            temp[k++] = arr[j++];
        }
    }
    
    while(i<=mid)
        temp[k++] = arr[i++];
 
    while( j<= ub)
        temp[k++] = arr[j++];
    
    for(long long i = lb ; i<=ub ; i++)
    {
        arr[i] = temp[i];
    }
    return count;
}

void mergeSort(vector<int>& arr , int lb , int ub , int &count)
{
    if(lb < ub)
    {
        int mid = lb + (ub - lb)/2;
        mergeSort(arr , lb , mid , count);
        mergeSort(arr , mid+1 , ub , count);
        count = count + merge(arr , lb , mid , ub);
    }
}
    int reversePairs(vector<int>& nums) {
        int count = 0;
        mergeSort(nums , 0 , nums.size()-1 , count);
        return count;
    }
};
