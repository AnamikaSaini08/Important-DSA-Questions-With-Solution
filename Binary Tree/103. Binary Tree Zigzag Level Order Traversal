/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
       vector<vector<int>>ans;
       if(!root)
            return ans;
       bool flag = true;
        
      queue<TreeNode*>q;
      q.push(root);
        
      while(q.size())
      {
        int size = q.size();
        vector<int>v;
        while(size--)
        {
          TreeNode *node = q.front();
          q.pop();
          if(node->left)
            q.push(node->left);
          if(node->right)
            q.push(node->right);
          if(size)
            v.push_back(node->val);
          else
            v.push_back(node->val);
        }
        flag = !flag;
        if(flag)
            reverse(v.begin() , v.end());
        ans.push_back(v);
      }
        return ans;
    }
};




/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
       vector<vector<int>>ans;
       if(!root)
            return ans;
       bool flag = false;
        
      queue<TreeNode*>q;
      q.push(root);
        
      while(q.size())
      {
        int size = q.size();
        vector<int>v(size);
        for(int i=0 ; i<size ; i++)
        {
          TreeNode *node = q.front();
          q.pop();
          if(node->left)
            q.push(node->left);
          if(node->right)
            q.push(node->right);
          if(flag)
              v[size-i-1] = node->val;
          else
              v[i] = node->val;
        }
        flag = !flag;
        ans.push_back(v);
      }
        return ans;
    }
};
