/************************************************************

    Following is the Binary Tree node structure:

    class BinaryTreeNode
    {
    public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };


************************************************************/
#include<bits/stdc++.h>

vector<vector<int>> getTreeTraversal(BinaryTreeNode<int> *root){
    // Write your code here.
    vector<vector<int>>v;
    if(!root)
        return v;
    
    stack<pair<BinaryTreeNode<int> * ,int> >s;
    s.push({root , 1});
    vector<int>pre;
    vector<int>post;
    vector<int>in;
    
    while(s.size())
    {
        BinaryTreeNode<int> *temp = s.top().first;
        int ind = s.top().second;
        s.pop();
        
        if(ind == 1)
        {
            pre.push_back(temp->data);
            ind++;
            s.push({temp , ind});
            if(temp->left)
                s.push({temp->left , 1});
        }
        else if(ind == 2)
        {
            in.push_back(temp->data);
            ind++;
            s.push({temp , ind});
            if(temp->right)
                s.push({temp->right , 1});
        }
        else if(ind == 3)
        {
            post.push_back(temp->data);
        }
    }
    
    v.push_back(in);
    v.push_back(pre);
    v.push_back(post);
    
    return v;
}
